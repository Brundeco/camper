// Micro clearfix hack for clearing floats - h5bp.com/q
@mixin clearfix {
  *zoom: 1;
  &:before, &:after {
    display: table;
    content: " ";
  }
  &:after {
    clear: both;
  }
}

.clearfix {
  @include clearfix;
}

// Image replacement
.ir {
  display: block;
  border: 0;
  text-indent: -999em;
  overflow: hidden;
  background-color: transparent;
  background-repeat: no-repeat;
  text-align: left;
  direction: ltr;
}

// Hide from both screenreaders and browsers: h5bp.com/u
.hidden {
  display: none !important;
  visibility: hidden;
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
.vh {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Extends the .visuallyhidden class to allow the element to be focusable
// when navigated to via the keyboard: h5bp.com/p
.vh.focusable:active, .vh.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

// Hide visually and from screenreaders, but maintain layout
.invisible {
  visibility: hidden;
}

// Zoom
@mixin zoom($ratio: 1) {
  zoom: $ratio;
  -moz-transform: scale($ratio);
  -moz-transform-origin: 0 0;
}

// Placeholder
@mixin placeholder($color: $grayLight) {
  ::-webkit-input-placeholder {
    color: $color;
  }
  ::-moz-placeholder {
    color: $color;
  }
  :-moz-placeholder {
    color: $color;
  }
  :-ms-input-placeholder {
    color: $color;
  }
}

// Text Overflow
@mixin text-truncate {
  text-overflow: ellipsis;
  vertical-align: top;
  white-space: nowrap;
  overflow: hidden;
  display: inline-block;
}

// GPU Rendering
@mixin enable-webkit-gpu($perspective:1000) {
  /* enable gpu rendering (ios hack) */
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: $perspective;
}

// Alpha colors
@mixin background-color-with-alpha ($color, $alpha) {
  $rgba: rgba(red($color), green($color), blue($color), $alpha);
  background-color: $color;
  background-color: $rgba;
}

@mixin border-color-with-alpha ($color, $alpha) {
  $rgba: rgba(red($color), green($color), blue($color), $alpha);
  /* border-color-with-alpha */ //
  border-color: $color;
  border-color: $rgba;
}

// Opacity
@mixin opacity($opacity: 100) {
  opacity: $opacity / 100;
  backface-visibility: hidden;
}

// Optimize font
@mixin optimize-font($smoothing:antialiased) {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: $smoothing;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: $smoothing;
}

// Font size
@mixin fs($size) {
  font-size: 0px + $size;
  font-size: 0rem + $size / $docFontSize;
}

// Line height
@mixin lh($lh) {
  line-height: 0px + $lh;
  line-height: 0rem + $lh / $docFontSize;
}

// =========================================================================
//
//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
//
//  Inspired by Mike Riethmuller's Precise control over responsive typography
//  http://madebymike.com.au/writing/precise-control-responsive-typography/
//
//  `strip-unit()` function by Hugo Giraudel
//
//  11.08.2016 Remove redundant `&` self-reference
//  31.03.2016 Remove redundant parenthesis from output
//  02.10.2015 Add support for multiple properties
//  24.04.2015 Initial release
//
//  Usage:
//  @include fluid-type(font-size, 320px, 1400px, 18px, 45px);
//  @include fluid-type(padding-bottom padding-top, 20em, 70em, 2em, 4em);
//
// =========================================================================

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Underline text
@mixin underline-text ($textColor: black, $bgColor: white, $height:1px) {

  color: $textColor;
  //ie9 fallback
  text-decoration: underline;
  display: inline-block;

  text-decoration: none;
  text-shadow: 3px 0 $bgColor, 2px 0 $bgColor, 1px 0 $bgColor, -1px 0 $bgColor, -2px 0 $bgColor, -3px 0 $bgColor;

  &:after {
    margin-top: -8px;
    content:''; display: block; height: $height; width: 100%;
    background-color: $textColor;
    background-repeat: repeat-x;
    background-size: 1px $height;
    /*
    background-image: -webkit-linear-gradient($bgColor 20%, $textColor 100%);
    background-image: linear-gradient($bgColor 20%, $textColor 100%);
    background-position: 0 95%;

    @media (-webkit-min-device-pixel-ratio: 1.75), (min-resolution: 168dpi) {
    background-position: 0 93%;

  } */

  }

  &::selection {
    background-color: $selection;
    text-shadow: none;
    color: inherit;
  }

}

// Height
@mixin h($h) {
  height: 0px + $h;
  height: 0rem + $h / $doc-font-size;
}

// Margin
@mixin m($mt:0, $mr:0, $mb:0, $ml:0) {
  margin: (0px + $mt) (0px + $mr) (0px + $mb) (0px + $ml);
  margin: (0rem + $mt / $doc-font-size) (0rem + $mr / $doc-font-size) (0rem + $mb / $doc-font-size) (0rem + $ml / $doc-font-size);
}

@mixin mt($m) {
  margin-top: 0px + $m;
  margin-top: 0rem + $m / $doc-font-size;
}

@mixin mb($m) {
  margin-bottom: 0px + $m;
  margin-bottom: 0rem + $m / $doc-font-size;
}

// Retina
// A helper mixin for applying high-resolution background images (http://www.retinajs.com)
@mixin at2x($path, $at2x_path, $w: auto, $h: auto) {
  background-image: url($path);
  @media all and (-webkit-min-device-pixel-ratio: 1.5) {
    background-image: url($at2x_path);
    background-size: $w $h;
  }
}

// Selection
@mixin selection($background: $grayDark, $color: $white) {
  ::-moz-selection {
    background-color: $background;
    color: $color;
  }
  ::selection {
    background-color: $background;
    color: $color;
  }
}

@mixin column-break-inside-avoid {
  -webkit-column-break-inside: avoid; /* Chrome, Safari */
  page-break-inside: avoid; /* Theoretically FF 20+ */
  break-inside: avoid-column; /* IE 11 */
}

// Triangle helper mixin
// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
// @param {Color} $color [currentcolor] - Triangle color
// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}
